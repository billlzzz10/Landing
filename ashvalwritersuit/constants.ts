
import { OperationMode, NoteTemplate, NotePriority, LoreEntry, RelationshipType } from './types';

export const COMMON_RELATIONSHIP_TYPES: RelationshipType[] = [
  "Ally", "Enemy", "Friend", "Rival", "Family (Sibling)", "Family (Parent)",
  "Family (Child)", "Family (Spouse)", "Family (Other)", "Mentor", "Mentee",
  "Romantic Interest", "Complicated", "Neutral", "Servant", "Master", "Acquaintance", "Other"
];


export const OPERATION_MODES: OperationMode[] = [
  {
    value: 'scene-analysis',
    label: 'วิเคราะห์ฉาก',
    systemInstruction: `คุณคือผู้ช่วยนักเขียน AI ผู้เชี่ยวชาญด้านการวิเคราะห์ฉาก
1.  วิเคราะห์ฉากที่ให้มาในรายละเอียดเกี่ยวกับองค์ประกอบ โครงสร้าง จังหวะ โทน อารมณ์ สัญลักษณ์ และผลกระทบโดยรวมต่อเรื่องราว
2.  หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ใช้ข้อมูลนั้นประกอบการวิเคราะห์ด้วย
3.  เสนอแนะแนวทางที่นำไปปฏิบัติได้เพื่อปรับปรุงหรือขยายความ โดยเน้นจุดแข็งและส่วนที่ควรพัฒนา
4.  สร้างบล็อก YAML metadata สรุปข้อมูลสำคัญของฉาก (เช่น title, characters, mood, pov, key_elements) แยกต่างหากจากส่วนวิเคราะห์ โดยให้อยู่ในรูปแบบ:
    \`\`\`yaml
    # YAML metadata block
    title: "ชื่อฉาก (ถ้ามี)"
    characters_involved: ["ตัวละคร A", "ตัวละคร B"]
    mood: "อารมณ์หลักของฉาก"
    pov_character: "ตัวละคร POV (ถ้ามี)"
    key_elements: ["องค์ประกอบสำคัญ 1", "องค์ประกอบสำคัญ 2"]
    setting_summary: "สรุปสถานที่/เวลาสั้นๆ"
    purpose_achieved: "จุดประสงค์ของฉากที่สำเร็จ (ถ้าประเมินได้)"
    \`\`\`
    (ปรับเปลี่ยน field ตามความเหมาะสมของข้อมูลที่มีในฉาก)`,
    userPromptFormatter: (input) => `กรุณาวิเคราะห์ฉากต่อไปนี้ และสร้าง YAML metadata block สรุปข้อมูล:\n\n${input}`,
  },
  {
    value: 'character-analysis',
    label: 'วิเคราะห์ตัวละคร',
    systemInstruction: `คุณคือผู้ช่วยนักเขียน AI ผู้เชี่ยวชาญด้านการวิเคราะห์ตัวละคร
1.  วิเคราะห์ข้อมูลตัวละครที่ให้มาเกี่ยวกับลักษณะนิสัย แรงจูงใจ เป้าหมาย ความขัดแย้งภายในและภายนอก ความสัมพันธ์กับตัวละครอื่น พัฒนาการของตัวละคร และบทบาทในเรื่องราว
2.  หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ใช้ข้อมูลนั้นประกอบการวิเคราะห์ด้วย
3.  ให้คำแนะนำเพื่อทำให้ตัวละครมีมิติและน่าเชื่อถือยิ่งขึ้น
4.  สร้างบล็อก YAML metadata สรุปข้อมูลสำคัญของตัวละคร (เช่น name, role, key_traits, main_goal, primary_conflict) แยกต่างหากจากส่วนวิเคราะห์ โดยให้อยู่ในรูปแบบ:
    \`\`\`yaml
    # YAML metadata block
    name: "ชื่อตัวละคร"
    role_in_story: "บทบาทหลักในเรื่อง"
    key_traits: ["ลักษณะนิสัยเด่น 1", "ลักษณะนิสัยเด่น 2"]
    main_goal: "เป้าหมายหลักของตัวละคร"
    primary_conflict: "ความขัดแย้งหลัก (ภายในหรือภายนอก)"
    arcana_affinity: ["พลัง Arcana (ถ้ามี)"]
    key_relationships: [{character: "ชื่อตัวละครอื่น", type: "ประเภทความสัมพันธ์"}]
    \`\`\`
    (ปรับเปลี่ยน field ตามความเหมาะสมของข้อมูลที่มีในตัวละคร)`,
    userPromptFormatter: (input) => `กรุณาวิเคราะห์ตัวละครจากข้อมูลต่อไปนี้ และสร้าง YAML metadata block สรุปข้อมูล:\n\n${input}`,
  },
  {
    value: 'magic-system',
    label: 'วิเคราะห์ระบบเวท/พลังพิเศษ',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI ผู้เชี่ยวชาญด้านการวิเคราะห์ระบบพลังเหนือธรรมชาติ จงวิเคราะห์ระบบที่ให้มาในแง่ของกฎเกณฑ์ ข้อจำกัด แหล่งพลังงาน ผลกระทบต่อโลกและตัวละคร ความสมดุล ความคิดสร้างสรรค์ และความสอดคล้องภายใน หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ใช้ข้อมูลนั้นประกอบการวิเคราะห์ด้วย พร้อมเสนอแนะแนวทางเพื่อเพิ่มความน่าเชื่อถือ ความลึกซึ้ง และความน่าสนใจของระบบ",
    userPromptFormatter: (input) => `กรุณาวิเคราะห์ระบบเวทมนตร์/พลังพิเศษจากรายละเอียดต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'plot-structuring',
    label: 'สร้างโครงเรื่อง (Plot Structuring)',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI ผู้เชี่ยวชาญการสร้างโครงเรื่อง งานของคุณคือช่วยผู้ใช้วางโครงเรื่องตามแนวคิดที่ให้มา หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ใช้ข้อมูลนั้นเป็นพื้นฐานในการสร้างโครงเรื่องด้วย เสนอโครงสร้างที่เป็นไปได้ (เช่น Three-Act Structure, Hero's Journey) พร้อมระบุจุดสำคัญ เช่น Inciting Incident, Rising Action, Climax, Falling Action, Resolution ให้คำแนะนำที่ชัดเจนและปฏิบัติได้จริง",
    userPromptFormatter: (input) => `ช่วยสร้างโครงเรื่องจากแนวคิดต่อไปนี้:\n\n${input}\n\n(เช่น ประเภทเรื่อง, แนวคิดหลัก, ตัวละครสำคัญ, จุดจบที่ต้องการ หรือองค์ประกอบสำคัญอื่นๆ ที่ผู้ใช้ต้องการให้มีในเรื่อง)`,
  },
  {
    value: 'tone-sentiment-analysis',
    label: 'วิเคราะห์โทนและอารมณ์',
    systemInstruction: "คุณคือ AI นักวิเคราะห์วรรณกรรมที่เชี่ยวชาญการประเมินโทนและอารมณ์ของเรื่อง จงวิเคราะห์ข้อความที่ให้มา แล้วระบุโทนโดยรวม และอารมณ์เด่นๆ ที่สื่อออกมา หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้พิจารณาว่าโทนและอารมณ์สอดคล้องกับโปรเจกต์โดยรวมหรือไม่ พร้อมยกตัวอย่างส่วนของข้อความที่สนับสนุนการวิเคราะห์นั้นๆ",
    userPromptFormatter: (input) => `กรุณาวิเคราะห์โทนและอารมณ์ของข้อความต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'lore-consistency-check',
    label: 'ตรวจสอบความต่อเนื่องกับข้อมูลโลก',
    systemInstruction: "คุณคือ AI ผู้ดูแลคลังข้อมูล (Lore Keeper) อัจฉริยะ หน้าที่ของคุณคือตรวจสอบความสอดคล้องของเนื้อเรื่องที่ได้รับกับชุดข้อมูลโลก (Lore Entries) ที่ให้มา (ซึ่งอาจเป็นข้อมูลจากโปรเจกต์ที่กำลังทำงานอยู่) จงเปรียบเทียบเนื้อเรื่องกับข้อมูลตัวละคร, สถานที่, เหตุการณ์, กฎเกณฑ์ต่างๆ ใน Lore หากพบความไม่สอดคล้องหรือความขัดแย้งใดๆ ให้ระบุออกมาอย่างชัดเจนพร้อมอธิบายว่าขัดแย้งกับข้อมูลส่วนใดใน Lore และถ้าเป็นไปได้ เสนอแนะแนวทางแก้ไข",
    userPromptFormatter: (input, contextData) => { // contextData will contain { projectLore: LoreEntry[] }
      const loreEntries = contextData?.projectLore || [];
      let prompt = `กรุณาตรวจสอบความต่อเนื่องของเนื้อเรื่องต่อไปนี้ กับข้อมูลโลก (Lore) ที่ให้มา:\n\n## เนื้อเรื่องที่ต้องการตรวจสอบ:\n${input}\n\n`;
      if (loreEntries && loreEntries.length > 0) {
        prompt += `## ข้อมูลโลก (Lore Entries) สำหรับอ้างอิง:\n`;
        loreEntries.forEach(entry => {
          prompt += `### ${entry.title} (ประเภท: ${entry.type})\n${entry.content}\n\n`;
        });
      } else {
        prompt += `## ข้อมูลโลก (Lore Entries):\n(ไม่มีข้อมูล Lore ให้มาเพื่อเปรียบเทียบ หรือโปรเจกต์นี้ยังไม่มีข้อมูล Lore)\n`;
      }
      return prompt;
    },
  },
  {
    value: 'continuity-check',
    label: 'ตรวจสอบความต่อเนื่อง (ทั่วไป)',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI ผู้เชี่ยวชาญด้านการตรวจสอบความต่อเนื่องในงานเขียน จงตรวจสอบเนื้อหาที่ให้มาอย่างละเอียดเพื่อหาความไม่สอดคล้องกันในเหตุการณ์ ไทม์ไลน์ ลักษณะและการกระทำของตัวละคร และองค์ประกอบอื่นใดที่อาจขัดแย้งกัน หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ใช้ข้อมูลนั้นประกอบการตรวจสอบด้วย ระบุจุดที่ไม่สอดคล้องและให้คำแนะนำที่เป็นรูปธรรมเพื่อแก้ไข",
    userPromptFormatter: (input) => `กรุณาตรวจสอบความต่อเนื่องของเนื้อหาต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'scene-creation',
    label: 'สร้างฉากใหม่',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI ที่มีความคิดสร้างสรรค์สูง จงสร้างฉากใหม่ตามคำอธิบายและข้อกำหนดที่ให้มา หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ใช้ข้อมูลนั้นเป็นแรงบันดาลใจหรือพื้นฐานในการสร้างฉาก โดยเน้นการเล่าเรื่องที่น่าสนใจ บรรยากาศที่ชัดเจน การกระทำของตัวละครที่มีความหมาย และบทสนทนาที่เป็นธรรมชาติ (ถ้ามี) สร้างฉากที่สมบูรณ์พร้อมรายละเอียดที่จำเป็น",
    userPromptFormatter: (input) => `กรุณาสร้างฉากจากคำอธิบายต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'scene-rewrite',
    label: 'ปรับแก้ฉาก',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI ที่มีทักษะในการแก้ไขและเขียนใหม่ จงปรับปรุงฉากที่ให้มาตามเป้าหมายที่ผู้ใช้ระบุ หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้พยายามปรับแก้ฉากให้สอดคล้องกับข้อมูลนั้นด้วย หากไม่ได้ระบุเป้าหมาย ให้เน้นการเพิ่มความชัดเจน ความกระชับ การใช้ภาษา ผลกระทบทางอารมณ์ จังหวะ และประสิทธิภาพโดยรวมของฉาก",
    userPromptFormatter: (input) => `กรุณาปรับแก้ฉากต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'show-dont-tell-enhancer',
    label: 'เพิ่มมิติด้วย Show, Don\'t Tell',
    systemInstruction: `คุณคือผู้ช่วยนักเขียน AI ที่เชี่ยวชาญเทคนิค 'Show, Don't Tell' งานของคุณคือวิเคราะห์สิ่งที่ผู้ใช้ป้อนเข้ามา และ:
1.  ระบุส่วนที่เป็นการ 'บอกเล่า' (Telling)
2.  อธิบายสั้นๆ ว่าทำไมส่วนนั้นจึงเป็นการ 'บอกเล่า'
3.  เสนอทางเลือก 1-3 วิธีในการเขียนใหม่โดยใช้เทคนิค 'แสดงให้เห็น' (Showing) โดยอาจใช้ข้อมูลจาก Project Context (ถ้ามี) เพื่อเพิ่มความสมจริง
จัดรูปแบบคำแนะนำของคุณให้ชัดเจนและอ่านง่าย`,
    userPromptFormatter: (input) => `ข้อความสำหรับปรับปรุงด้วยหลัก 'Show, Don't Tell':\n\n${input}`,
  },
  {
    value: 'rate-scene',
    label: 'ให้คะแนนฉาก',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI และนักวิจารณ์ผู้เชี่ยวชาญ จงให้คะแนนฉากที่ผู้ใช้ป้อนเข้ามาจาก 1-10 โดยพิจารณาจาก: ความน่าสนใจ, การดำเนินเรื่อง, บทสนทนา, การใช้ภาษา, การพัฒนาตัวละคร, และผลกระทบทางอารมณ์ หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ประเมินความสอดคล้องกับโปรเจกต์นั้นด้วย อธิบายเหตุผลพร้อมเสนอแนะจุดแข็งและจุดที่ควรปรับปรุง",
    userPromptFormatter: (input) => `กรุณาให้คะแนนและวิจารณ์ฉากต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'create-world',
    label: 'สร้างโลกในนิยาย',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI ผู้เชี่ยวชาญด้านการสร้างโลก (World-Building) จงช่วยผู้ใช้สร้างและขยายรายละเอียดเกี่ยวกับโลกในจินตนาการตามคำสั่งหรือแนวคิดที่ให้มา หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ต่อยอดจากข้อมูลนั้น พยายามให้ข้อมูลที่สร้างสรรค์, มีความสอดคล้องภายใน, และจุดประกายจินตนาการ",
    userPromptFormatter: (input) => `กรุณาช่วยสร้าง/ขยายรายละเอียดโลกในนิยายจากข้อมูลต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'dialogue-generation',
    label: 'สร้างบทสนทนา',
    systemInstruction: "คุณคือ AI นักเขียนบทสนทนาผู้เชี่ยวชาญ สร้างบทสนทนาที่สมจริงและน่าติดตามระหว่างตัวละครตามรายละเอียดที่กำหนด หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้ใช้ลักษณะนิสัยของตัวละครหรือสถานการณ์ในโปรเจกต์นั้นมาประกอบการสร้างบทสนทนา",
    userPromptFormatter: (input) => `สร้างบทสนทนาตามรายละเอียดนี้:\n\n${input}\n\nตัวอย่าง: ระบุจำนวนตัวละคร, ชื่อ (ถ้ามี), ลักษณะนิสัยโดยย่อของแต่ละคน, สถานการณ์ที่กำลังเผชิญ, และสิ่งที่ต้องการให้เกิดขึ้นในบทสนทนานี้`,
  },
  {
    value: 'summarize-elaborate',
    label: 'สรุปย่อ / ขยายความ',
    systemInstruction: "คุณคือ AI ผู้เชี่ยวชาญด้านการสรุปและขยายความเนื้อหา จงวิเคราะห์คำสั่งของผู้ใช้:\n- หากผู้ใช้ต้องการ 'สรุปย่อ' ให้ย่อความเนื้อหาที่ให้มาให้กระชับที่สุดโดยยังคงใจความสำคัญทั้งหมด\n- หากผู้ใช้ต้องการ 'ขยายความ' ให้เพิ่มรายละเอียด ตัวอย่าง คำอธิบายเพิ่มเติม หรือมุมมองที่แตกต่าง โดยอาจใช้ข้อมูลจาก Project Context (ถ้ามี) เพื่อเพิ่มความลึกซึ้ง\n- หากผู้ใช้ไม่ได้ระบุชัดเจน ให้พิจารณาจากเนื้อหาและพยายามทำความเข้าใจเจตนา",
    userPromptFormatter: (input) => `คำสั่ง: [ระบุที่นี่ว่าต้องการ "สรุปย่อ" หรือ "ขยายความ" และถ้าเป็นการขยายความ สามารถระบุส่วนที่ต้องการเน้นได้]\n\nเนื้อหา:\n${input}`,
  },
  {
    value: 'summarize-text',
    label: 'สรุปข้อความ (Summarize Text)',
    systemInstruction: "คุณคือ AI ผู้เชี่ยวชาญด้านการสรุปข้อความ จงสรุปเนื้อหาที่ได้รับมาให้กระชับ รัดกุม และคงไว้ซึ่งใจความสำคัญทั้งหมด",
    userPromptFormatter: (input) => `กรุณาสรุปข้อความต่อไปนี้:\n\n${input}`,
  },
  {
    value: 'rewrite-text',
    label: 'เขียนใหม่/ปรับสำนวน (Rewrite Text)',
    systemInstruction: "คุณคือ AI ผู้ช่วยปรับแก้และเขียนข้อความใหม่ได้อย่างหลากหลาย จงเขียนข้อความที่ได้รับมาใหม่ โดยสามารถปรับเปลี่ยนน้ำเสียง รูปแบบ หรือความซับซ้อนของภาษาตามความเหมาะสม หรือตามคำแนะนำเพิ่มเติมที่ผู้ใช้ระบุใน Prompt",
    userPromptFormatter: (input) => `กรุณาเขียนข้อความต่อไปนี้ใหม่ (สามารถระบุเป้าหมายเพิ่มเติมได้ เช่น ทำให้เป็นทางการมากขึ้น, อ่านง่ายขึ้น, เหมาะสำหรับเด็ก หรืออื่นๆ):\n\n${input}`,
  },
  {
    value: 'draft-email',
    label: 'ร่างอีเมล (Draft Email)',
    systemInstruction: "คุณคือ AI ผู้ช่วยในการร่างอีเมล จงสร้างฉบับร่างอีเมลที่มีความเป็นมืออาชีพและชัดเจนตามข้อมูลที่ผู้ใช้ป้อนเข้ามา",
    userPromptFormatter: (input) => `กรุณาร่างอีเมลตามประเด็นหรือวัตถุประสงค์ต่อไปนี้:\n\n${input}\n\n(ระบุประเภทผู้รับ, น้ำเสียงที่ต้องการ, ข้อความหลัก, และสิ่งที่ต้องการให้ผู้รับทำ (call to action) ถ้ามี)`,
  },
  {
    value: 'ad-copy-generator',
    label: 'สร้างข้อความโฆษณา (Ad Copy)',
    systemInstruction: "คุณคือ AI копирайтер (Copywriter) ผู้เชี่ยวชาญการสร้างข้อความโฆษณาที่ดึงดูดใจ จงสร้างข้อความโฆษณาที่สั้น กระชับ และมีประสิทธิภาพ โดยอ้างอิงจากรายละเอียดสินค้า/บริการ และกลุ่มเป้าหมายที่ผู้ใช้กำหนด",
    userPromptFormatter: (input) => `สินค้า/บริการ: ${input}\nกลุ่มเป้าหมาย: [ระบุกลุ่มเป้าหมาย]\nข้อความหลัก/ประโยชน์: [ระบุข้อความหลัก]\n\nกรุณาสร้างตัวเลือกข้อความโฆษณามาหลายๆ แบบ`,
  },
  {
    value: 'brainstorm-ideas',
    label: 'ระดมไอเดีย (Brainstorm Ideas)',
    systemInstruction: "คุณคือ AI ผู้ช่วยสร้างสรรค์สำหรับการระดมสมอง จงสร้างรายการไอเดียตามหัวข้อหรือคำขอของผู้ใช้",
    userPromptFormatter: (input) => `ช่วยฉันระดมไอเดียสำหรับ: ${input}\n\n(ตัวอย่าง: หัวข้อบทความเกี่ยวกับ X, สโลแกนแคมเปญการตลาดสำหรับ Y, ฟีเจอร์ใหม่สำหรับ Z) กรุณาเสนอหลายๆ ตัวเลือก`,
  },
  {
    value: 'custom',
    label: 'กำหนดเอง',
    systemInstruction: "คุณคือผู้ช่วยนักเขียน AI ที่มีความหลากหลายและปรับตัวได้ดี จงปฏิบัติตามคำแนะนำเฉพาะของผู้ใช้อย่างสุดความสามารถ หากมีข้อมูลโปรเจกต์ (Project Context) ให้มา ให้พิจารณาข้อมูลนั้นในการตอบสนองด้วย พยายามทำความเข้าใจเจตนาของผู้ใช้และส่งมอบผลลัพธ์ที่เกี่ยวข้องและมีคุณภาพสูง",
    userPromptFormatter: (input) => input,
  },
];

export const INITIAL_AI_RESPONSE_MESSAGE = '<p class="text-gray-400 dark:text-gray-400 italic">ผลลัพธ์จาก AI จะปรากฏที่นี่...</p>';
export const PROCESSING_AI_RESPONSE_MESSAGE = '<p class="text-gray-400 dark:text-gray-400 italic">กำลังประมวลผล...</p>';
export const MODEL_NAME = 'gemini-2.5-flash-preview-04-17';
export const MAX_INPUT_FILES = 10;
export const AI_MAX_INPUT_CHARS = 50000;
export const MAX_CHAT_EXCHANGES = 10;
export const PROJECT_CONTEXT_MAX_NOTE_CHARS = 250; // Increased from 150
export const PROJECT_CONTEXT_MAX_LORE_CHARS = 250; // Increased from 150
export const MAX_PROJECT_NOTES_IN_CONTEXT = 7; // Increased from 5
export const MAX_PROJECT_LORE_IN_CONTEXT = 7; // Increased from 5
export const MIN_LEARNED_WORD_LENGTH = 3;


export const NOTE_PRIORITIES: { value: NotePriority; label: string; colorClass: string }[] = [
    { value: 'none', label: 'ไม่มี', colorClass: 'bg-slate-500' },
    { value: 'low', label: 'ต่ำ', colorClass: 'bg-green-500' },
    { value: 'medium', label: 'กลาง', colorClass: 'bg-yellow-500' },
    { value: 'high', label: 'สูง', colorClass: 'bg-red-500' },
];


const getCurrentDateFormatted = () => {
  const today = new Date();
  return today.toISOString().split('T')[0];
};

export const NOTE_TEMPLATES: NoteTemplate[] = [
  {
    id: 'character-sketch',
    name: 'โครงร่างตัวละคร (Character Sketch)',
    content: `# ตัวละคร: [ชื่อตัวละคร]

## ข้อมูลเบื้องต้น
- **บทบาท:**
- **เผ่าพันธุ์/ประเภท:**
- **อายุ/ลักษณะภายนอก:**

## ลักษณะนิสัย
- **จุดเด่น:**
- **จุดด้อย:**
- **แรงจูงใจ:**
- **ความกลัว:**

## ประวัติความเป็นมา
- (บรรยายประวัติย่อของตัวละคร)

## Arcana/พลังพิเศษ (ถ้ามี)
- **ชื่อพลัง:**
- **คำอธิบาย:**
- **ข้อจำกัด:**

## ความสัมพันธ์
- **ตัวละคร A:** (ลักษณะความสัมพันธ์)
- **ตัวละคร B:** (ลักษณะความสัมพันธ์)

## เป้าหมายในเรื่อง
-

## บันทึกเพิ่มเติม
-
`
  },
  {
    id: 'plot-outline',
    name: 'โครงเรื่องย่อ (Plot Outline)',
    content: `# โครงเรื่อง: [ชื่อเรื่อง/บท]

## แนวคิดหลัก (Logline)
-

## ตัวละครหลัก
- [ชื่อตัวละคร 1]: (บทบาทสั้นๆ)
- [ชื่อตัวละคร 2]: (บทบาทสั้นๆ)

## ฉากเปิด (Opening Scene)
- (บรรยายสั้นๆ)

## จุด Inciting Incident
- (เหตุการณ์ที่เริ่มต้นเรื่องราว)

## Rising Action (เหตุการณ์สำคัญ)
1.
2.
3.

## จุด Climax
- (จุดสูงสุดของเรื่อง)

## Falling Action
- (ผลลัพธ์จาก Climax)

## บทสรุป (Resolution)
-

## ประเด็น/ธีมหลัก
-
`
  },
  {
    id: 'world-building',
    name: 'สร้างโลก (World Building Element)',
    content: `# องค์ประกอบโลก: [ชื่อองค์ประกอบ]

## ประเภท
- (เช่น สถานที่, วัฒนธรรม, สิ่งมีชีวิต, เทคโนโลยี, ระบบเวทมนตร์)

## คำอธิบายโดยละเอียด
-

## กฎ/ลักษณะเฉพาะ
-

## ประวัติความเป็นมา (ถ้ามี)
-

## ความเชื่อมโยงกับส่วนอื่นในโลก
-

## ผลกระทบต่อเนื้อเรื่อง/ตัวละคร
-

## ภาพร่าง/แรงบันดาลใจ (ถ้ามี)
- (แนบลิงก์รูปภาพ หรือคำอธิบาย)
`
  },
  {
    id: 'writers-daily-log',
    name: 'บันทึกประจำวันนักเขียน (Writer\'s Daily Log)',
    content: `# บันทึกนักเขียน: ${getCurrentDateFormatted()}

## เป้าหมายวันนี้
-

## สิ่งที่ทำสำเร็จ
- (จำนวนคำ, ฉากที่เขียน, ปัญหาที่แก้ไข)

## ความคืบหน้า/สิ่งที่ค้นพบ
-

## อุปสรรค/สิ่งที่ต้องปรับปรุง
-

## ไอเดียใหม่/สิ่งที่ต้องทำต่อ
-

## ความรู้สึก/กำลังใจ
-
`
  },
  {
    id: 'feedback-request',
    name: 'ขอ Feedback',
    content: `# ขอ Feedback สำหรับ: [ชื่อส่วน/หัวข้อ]

## ส่วนที่ต้องการ Feedback โดยเฉพาะ
- (ระบุส่วนที่ต้องการให้ผู้ตรวจทานเน้นเป็นพิเศษ)

## คำถามเฉพาะสำหรับผู้ตรวจทาน
1.
2.

## บริบทของเนื้อหา (ถ้าจำเป็น)
- (อธิบายสั้นๆ เกี่ยวกับเนื้อหาส่วนนี้เพื่อให้ผู้ตรวจทานเข้าใจ)

## วันที่ต้องการ Feedback กลับ
-

## ขอบคุณสำหรับความช่วยเหลือ!
`
  }
];

export const FONT_FAMILIES: { value: string; label: string; css: string }[] = [
  { value: 'Sarabun', label: 'สารบรรณ (Sarabun)', css: "'Sarabun', sans-serif" },
  { value: 'Noto Sans Thai', label: 'โนโต ซานส์ ไทย (Noto Sans Thai)', css: "'Noto Sans Thai', sans-serif" },
  { value: 'Arial', label: 'Arial', css: "Arial, sans-serif" },
  { value: 'Verdana', label: 'Verdana', css: "Verdana, sans-serif" },
  { value: 'Tahoma', label: 'Tahoma', css: "Tahoma, sans-serif" },
];
